; this is better than the solution in the book because we do not need to use the next func which calls if everytime 

(define (square x)
  (* x x))

(define ( find-divisor n)
  (define (fast-find-divisor n a)
    (cond ( (> (square a) n ) n)
          ( (= (remainder n a) 0 ) a)
          ( ( not (= (remainder n a) 0)) ( fast-find-divisor n (+ a 2))))
  )
  ( if ( = ( remainder n 2) 0) 2 (fast-find-divisor n 3)))

(find-divisor 79)
