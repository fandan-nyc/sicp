#lang racket
(require racket/trace)
(define (product-recur term a next b)
  (if ( > a b)
      1
      ( * (term a) (product-recur term (next a ) next b))
      )
  )
(define (product-iter term a next b)
  (define (product-helper a result)
    (if (> a b)
        result
        ( product-helper (next a) (* result (term a)))
        )
    )
  (product-helper a 1)
  )


(define (square a )
  (* a a )
  )

(define (next a)
  ( + a 1.0)
  )

(define (term a)
  ( if(even? a)
      (/ a (+ a 1 ))
      (/ ( + a 1 ) a)
      )
  )

(define (pi-recur n)
  (* 2 ( product-recur term 1 next n)
     )
  )

(define (pi-iter n)
  (* 2 ( product-iter term 1 next n)
     )
  )


(pi-recur 1000000)
(pi-iter 10000)
