#lang racket

(define (accumulate-recur combiner null-value term a next b)
  (if( > a b) 
     null-value
     ( combiner ( term a) ( accumulate-recur combiner null-value term (next a) next b)
                )
     )
  )

(define (identify a )
  a)
(define (next a) 
  (+ 1 a)
  )
(define ( sum term a next b)
  (accumulate-recur + 0 term a next b )
  )
(define ( product term a next b)
  (accumulate-recur * 1 term a next b)
  )
(sum identify 1 next 5)
(sum identify 1 next 10)
(product identify 1 next 5)
(product identify 1 next 6)
(product identify 1 next 10)


(define (accumulate-iter combiner null-value term a next b)
  (define (accumulate-helper a result )
    (if( > a b)
     result
     ( accumulate-helper (next a) (combiner result (term a)))
     )
  )
  (accumulate-helper a null-value)
  )
(define ( sum-iter term a next b)
  (accumulate-iter + 0 term a next b )
  )
(define ( product-iter term a next b)
  (accumulate-iter * 1 term a next b)
  )
(sum-iter identify 1 next 5)
(sum-iter identify 1 next 10)
(product-iter identify 1 next 5)
(product-iter identify 1 next 6)
(product-iter identify 1 next 10)
