
(define (accumulate-filter-recur filter combine null-value term a next b)
  (if (> a b)
      null-value
      ( combine (if (filter (term a)) (term a) null-value) (accumulate-filter-recur filter combine null-value term (next a ) next b)
                )
                )
      )

(define (accumulate-filter-iter filter combine null-value term a next b)
  (define (helper a result)
    (if(> a b )
     result
     (helper (next a) (combine result (if (filter (term a)) (term a) null-value)))
     )
    )
  (helper a null-value)
  )
; calc the sum of square of even numbers between a b)
(define (square x)
  (* x x)
  )
(define (filter-even-for-sum x)
  (even? x))
(define (term-sum x)
  x)
(define (next-sum x)
  (+ x 1)
  )
(define (sum-even-recur a b )
  (accumulate-filter-recur filter-even-for-sum +  0  term-sum  a next-sum b)  
  )
(sum-even-recur 1 10)
(define (sum-even-iter a b)
  (accumulate-filter-iter filter-even-for-sum + 0 term-sum a next-sum b)
  )
(sum-even-iter 1 10)

