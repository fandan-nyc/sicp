#lang racket
(require racket/trace)
; 1.39
; tan x

; recur
(define (cf-recur f g k)
  (define (recur-helper f g i)
    (let ( (fi (f i))
           (gi (g i))
           )
      (/ fi ( + gi 
                (if (> i k)
                    0
                    (recur-helper f g ( + 1 i)))
                )
         )
      )
    )
  (recur-helper f g 1.0)
  )
(define (cf-iter f g k)
  (define (iter-helper k result)
    (let ( (fk (f k))
           (gk (g k)))
    (if (= k 0)
        result
        (iter-helper (- k 1) (/ fk ( + gk result)))
        )
      )
    )
  (iter-helper k 0)
  )

; 1.38 for test
(trace cf-recur)
(cf-recur (lambda (i) 1)
          (lambda (i) (if ( = (modulo i 3) 2) 
                          ( * 2 ( / ( + i 1) 3))
                          1))
          100)

(cf-iter (lambda (i) 1.0)
          (lambda (i) (if ( = (modulo i 3) 2) 
                          ( * 2 ( / ( + i 1) 3))
                          1))
          100)

; 1.39
(define (tan-cf x k)
  (cf-recur (lambda (i) (if (= i 1)
                          x
                          ( - (* x x))))
          (lambda (i) ( - ( * 2 i) 1))
          100)
  )
(tan-cf 5 1000)


