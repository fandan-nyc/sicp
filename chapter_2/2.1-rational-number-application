
#lang racket
(require racket/trace)

; pairs 
(define x ( cons 1 2))
(car x) ; 1
(cdr x) ; 2
(define y ( cons 3 4))
(define z ( cons x y))
(car (cdr z));3
;gcd ref line 65
(define (gcd a b )
  (if ( = (remainder a b) 0) 
      b
      (gcd b (remainder a b))
      )
  )

; rational operation
(define (add-or-sub x y operation)
  (make-rat ( operation (* (numer x) (denom y)) (* (numer y)(denom x)))
            (* (denom x) ( denom y))))

(define (mul-or-div x y if-multi)
  (let ((z (if if-multi y (make-rat (denom y) (numer y)))))
    (make-rat (* (numer x) (numer z)) (* (denom x) (denom z)))))

(define (add-rat x y)
  (add-or-sub x y + ))

(define (sub-rat x y)
  (add-or-sub x y -))
(define (multi-rat x y)
  (mul-or-div x y #t)
  )
(define (div-rat x y)
  (mul-or-div x y #f)
  )

; similarly, to define a rational number, we should be able to:
;(define (make-rat a b) ( cons a b))
(define (make-rat a b)
  (let ((g (gcd a b)))
    (cons ( / a g) (/ b g))
    ))
(define (numer  x) ( car x))
(define (denom  x) ( cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display '/)
  (display (denom x))
  )
(define one-half (make-rat 1 2))
(print-rat one-half)
(define one-third (make-rat 1 3))
(define one-forth (make-rat 1 4))
(print-rat one-third)
(print-rat (add-rat one-half one-third))
(print-rat (sub-rat one-half one-third))
(print-rat (sub-rat one-third one-half))
(print-rat (multi-rat one-third one-half))
(print-rat (div-rat one-forth one-half))
(newline)
;note that, in the last example, 2/4 is not reduced to the lowest level. 
;so we use gcd change in line 43
; gcd func is aded in line 11


