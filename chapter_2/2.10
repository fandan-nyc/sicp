(define (make-interval a b)
  (cons a b)
  )
(define (upper-bound t)
  (max (car t) (cdr t))
  )
(define (lower-bound t)
  (min (car t) (cdr t))
  )
(define (multi-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (if (< ( * (upper-bound y) (lower-bound y)) 0)
      (error "the y spans over 0" y)
      (multi-interval x (make-interval ( / 1.0 (upper-bound y)) (/ 1.0 (lower-bound y))))
      )
  )
(define x (make-interval 1 2))
(define y (make-interval 3 4))
(define z (make-interval -1 2))
(div-interval x y)
(div-interval x z)
