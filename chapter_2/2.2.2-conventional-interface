;sequence as conventional interface
(define (square x)
  (* x x))

(define (sum-odd-squares tree)
  (cond((null? tree) 0)
       ((not (pair? tree)) (if(odd? tree) (square tree) 0))
       (else (+ (sum-odd-squares (car tree)) (sum-odd-squares (cdr tree))))
       )
  )
(display '(sum-odd-square old version test))
(newline)
(sum-odd-squares (list 0 2 3 (list 1 3 2 2 (list 2 0) 4 6 8)))

(define (fib x)
  (define (helper a b x)
    (cond ((= x 0) 0)
          ((= x 1) a)
          (else (helper (+ a b) a (- x 1)))
          )
    )
  (helper 1 0 x)
  )

(define (even-fib n)
  (define (next k )
    (if (> k n)
        null
        (if (even? (fib k))
            (cons (fib k) (next (+ k 1)))
            (next ( + k 1)))
        )
  )
  (next 0))
(display '(print the even fib in a list))
(newline)
(even-fib 10)
; the first procedure: enumerate, filter, map, accumulate
; the second procesure: enumerate, map, filter, accumulate
; so we can use conventional interface to make the whole process more generic
(define (accumulate opt init input)
  (if(null? input)
     init
     (accumulate opt (opt (car input) init) (cdr input)))
  )
(define (filter opt sequence)
  (cond ((null? sequence) null)
        ((opt (car sequence)) (cons (car sequence) (filter opt (cdr sequence))))
        (else (filter opt (cdr sequence)))
        ))
; the map is pre-defined in racket already 
(define (enumerate-interval a b)
  (if(> a b)
     null
     (cons a (enumerate-interval (+ a 1) b))
     )
  )
(define (enumerate-tree tree)
  (if (null? tree)
      (list)
      (if(not (pair? tree))
         (list tree)
         (append (enumerate-tree (car tree)) (enumerate-tree (cdr tree)))
         )
      )
  )
;rewrite sum-odd-square
(define (sum-odd-square-rewrite tree)
  (accumulate + 0 (map square (filter odd? (enumerate-tree tree)))))
(display '(rewrite the sum odd square using the conventional interface))
(newline)
(sum-odd-square-rewrite (list 0 2 3 (list 1 3 2 2 (list 2 0) 4 6 8)))
(define (even-fib-rewrite x)
  (accumulate cons null (filter even? (map fib (enumerate-interval 0 x)))))
(even-fib-rewrite 10)

