(define (scale-tree tree factor)
  (cond ((null? tree) null)
        ((not (pair? tree)) (* tree factor))
        (else (cons ( scale-tree (car tree) factor)
                    ( scale-tree (cdr tree) factor)))
        ))
(define (scale-tree-map tree factor)
  (map (lambda (sub-tree) (if(pair? sub-tree)
                             (scale-tree sub-tree factor)
                             (* sub-tree factor)))
       tree))
  
(scale-tree (list 1 2 3 4) 5)
(scale-tree-map (list 1 2 3 4) 5)
     
