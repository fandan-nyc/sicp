(define x (cons 1 2))
(define y (list 1 2))


(define (length item)
  (define (helper item result)
    (if(null? item)
       result
       (helper (cdr item) ( + result 1))
       )
    )
  (helper item 0))
(define (count-leaves x)
  (cond ( (null? x) 0)
        ( (not (pair? x)) 1)
        ( else (+ (count-leaves (car x)) ( count-leaves ( cdr x)))
        ))
  )
(count-leaves (list 1 2))
