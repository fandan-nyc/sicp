(define (reverse x)
  (define (helper x result)
    (if (null? x)
        result
        (helper (cdr x) (cons (car x) result))
        )
    )
  (helper x (list))
  )

(define (same-parity . x)
  (define start (car x))
  (define (helper g result)
    (if (null? g)
        result
        (helper (cdr g)  (if(= (remainder start 2)
                                    (remainder (car g) 2))
                                 (cons (car g) result)
                                 result)))
    )
  (reverse(helper x (list)))
  )
  
(same-parity  1 2 3 4 5 6 7 8 9)
(same-parity  2 1 3 4 5 6 7 8 9)
                                 
