(define (reverse x)
  (define (helper x result)
    (if(null? x)
       result 
       (helper (cdr x) (cons (car x) result))
       ))
    (helper x (list))
  )

(define (deep-reverse x)
  (define (helper x result)
    (if (null? x)
        result
        (if (pair? (car x))
            (helper (cdr x) (cons (reverse (car x)) result))
            (helper (cdr x) (cons (car x) result))
            )
        )
    )
  (helper x (list))
  )
; another solution
 (define (deep-reverse x) 
   (if (pair? x) 
       (append (deep-reverse (cdr x))  
               (list (deep-reverse (car x)))) 
       x)) 
(deep-reverse (list 1 2 3 (list 7 8 9)))

;; this is the most readable one. but not ideal
(define (deep-reverse-2 x)
  (if (pair? x)
      (reverse (map deep-reverse-2 x))
      x)
  )
