(define (make-point x y)
  (cons x y)
  )
(define (x-point a)
  (car a)
  )
(define (y-point b)
  (cdr b)
  )
(define (segment x y)
  (cons x y)
  )
(define (start-point t)
  (car t)
  )
(define (end-point t)
  (cdr t)
  )
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")")
  )
(define (average x y)
  ( / ( + x y) 2.0))

(define (average-point x y)
  (make-point ( average (x-point x) (x-point y)) (average (y-point x) (y-point y)))
  )

(print-point (average-point (make-point -2 -3) (make-point 7 42)))

(define (rectangle x y)
  (segment x y))
(define (side-length rectangle side)
  (abs ( - (side (start-point rectangle))
           (side (end-point   rectangle))
           )
       )
  )

(define (rec-calc rectangle operator)
  (let ((width (side-length rectangle x-point))
        (height (side-length rectangle y-point))
        )
    (operator width height)
  ))

(define (rectangle-perimeter a)
    (rec-calc  a (lambda (x y) ( * 2 (+ x y))))
    )

(define (rectangle-area a)
    (rec-calc a  *)
    )
(newline)
(rectangle-area (rectangle (make-point 1 2 ) (make-point 3 4)))
(rectangle-perimeter (rectangle (make-point 1 2 ) (make-point 3 4)))

