;2.31
(define (tree-map x operation)
  (cond ((null? x) null)
        ((not (pair? x)) (operation x))
        (else (cons (square-tree (car x)) (square-tree (cdr x))))
        )
  )
(define (square-tree x)
  (tree-map x (lambda(x) (* x x)))
  )

(define  (tree-map-new x operation)
  (map (lambda (x) (if (pair? x)
                       (tree-map-new x operation)
                       (operation x)))
       x))
(define (square-tree-map x)
  (tree-map-new x (lambda(x) (* x x)))
  )

                                                        
(define test (list 1 2 3 4 (list 5 6 (list 7 8))))
(square-tree test)
(square-tree-map test)
