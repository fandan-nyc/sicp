;2.33
(define (accumulate op init sequence) 
  (if(null? sequence)
     init
     (op (car sequence) ( accumulate op init (cdr sequence))))
  )

(define (map p sequence)
  (accumulate (lambda (x y) ( cons (p x) y)) null sequence))

(map (lambda (x) ( + x 1)) (list 1 2 3 4))
;(2,3,4,5)

(define (append p1 p2)
  (accumulate cons p2 p1)
  )
(append (list 1 2 3) (list 4 5 6))

(define (length sequence)
  (accumulate (lambda(x y) (+  1 y)) 0 sequence))

(length (list 1 2 3 4 6 7 8))
