
;2.36 accumulate-n

(define (accumulate init op sequence)
  (if(null? sequence)
     init
     (op (car sequence) (accumulate init op (cdr sequence)))
     )
)


(define (accumulate-n op init sequence)
  (if (null? (car sequence))
      null
      (cons (accumulate    init op  (map (lambda(x) (car x)) sequence))
            (accumulate-n   op init (map (lambda(x) (cdr x)) sequence))      
      ))
  )

(define data (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))
;(map (lambda (x) (cdr x)) data) 

(accumulate-n + 0 data)

(accumulate-n + 0 (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))

