

(define (accumulate op init sequence)
  (if (null? sequence)
      init
      (op (car sequence) (accumulate op init (cdr sequence)))))

(define (accumulate-n op init sequence)
  (if (null? (car sequence))
      null
      (cons (accumulate op init (map car sequence))
            (accumulate-n op init (map cdr sequence)))))

(accumulate-n + 0 (list (list 1 2) (list 3 4)))


(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(dot-product (list 1 2 3) (list 4 5 6))

(define data (list (list 1 2 3) (list 4 5 6)))

(define (matrix-*-vector m v)
  (map (lambda(t)(dot-product t v)) m)
)

(define (transpose x)
  (accumulate-n cons null x))

(define (matrix-*-matrix x y)
  (let ((yt (transpose y)))
    (accumulate cons null (map (lambda(a) (matrix-*-vector yt a))
                               x))
  )
)

(matrix-*-matrix (list (list 1 2) (list 3 4) (list 5 6))
                 (list (list 1 2 3 4) (list 5 6 7 8)))
