#lang racket
(require racket/trace)
; 2.39 use fold right and fold left for reverse
(define (accumulate opt init sequence)
  (if ( null? sequence)
      init
      (accumulate opt (opt (car sequence) init) (cdr sequence))
      )
  )

(define (fold-right opt init sequence)
  (accumulate opt init sequence))

(define (fold-left opt init sequence)
  (define (iter result rest)
    (if (null? rest)
        result 
        (iter (opt result (car rest))
              (cdr rest)
              )
        ))
    (iter init sequence)
    )

(define (reverse sequence)
  (fold-right (lambda (x y) 
                (cons x y)
                ) null sequence )
  )
  
(reverse (list 1 2 3))
(define (reverse-1 sequence)
  (fold-left (lambda (x y)
               (cons  y x)) null sequence)
  )
(reverse-1 (list 1 2 3))

;;;; modified on Oct 5th, 2016

(define (fold-right op init sequence)
  (if(null? sequence)
     init
     (op (car sequence) (fold-right op init (cdr sequence)))
  )
)

(define (fold-left op init sequence)
  (define (helper result rest)
    (if (null? rest)
        result
        (helper (op result (car rest)) (cdr rest)))
    )
  (helper init sequence))
  
(define (reverse list)
  (fold-left (lambda (x y)
                   (cons y x))
             null list))

(define (reverse-2 list1)
  (fold-right (lambda (newD reversed)
                (append reversed (list newD))) null list1))
;; here we depend on the fact that (append null abc) is still abc. 

(reverse-2 (list 1))
