(require racket/trace)
(define (exp x a)
  (define (exp-helper x a result)
    (if (= a 0)
        result
        (exp-helper x (- a 1) ( * result x))
        ))
    (exp-helper x a 1)
    )

(define (count-a-power-in-x x a)
    (define (count-helper x a result)
        (if (not( = 0 (remainder x a)))
            result
            (count-helper (/ x a) a (+ result 1))
        )
    )
  (count-helper x a 0)
  )

(define (make-cons a b)
  (* (exp 2 a) (exp 3 b))
  )
(define (car t)
  (count-a-power-in-x t 2)
  )
(define (cdr t)
  (count-a-power-in-x t 3)
  )
(make-cons 7 11)
(car 22674816)
