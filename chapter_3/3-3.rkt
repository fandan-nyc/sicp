#lang racket

(define (make-account originPassword balance)
  (define (withdraw x)
    (if (>= balance x)
        (begin (set! balance (- balance x))
               balance)
        "insufficient fund"))
  (define (deposite x)
    (set! balance (+ balance x))
    balance) 
  (define (dispatch password func)
    (let ((pass originPassword))
      (if (eq? pass password)
          (cond ((eq? func 'withdraw) withdraw)
                ((eq? func 'deposite) deposite)
                (else (lambda(x) "the method does not exist")))
          (lambda (y) "wrong password, try again"))))
  dispatch)

(define x (make-account 'aa 100))
((x 'aa 'deposite) 10)
((x 'aa 'deposite) 10)
((x 'aa 'withdraw) 56)
((x 'aay 'withdraw) 156)
((x 'aa 'withddraw) 156)
